Creating virtual environments
=============================

- Python can be run in a global environment, which would utilise a common directory for the entire system for storing packages.
- A better practice is to use isolated virtual environments.
- This can be done using venv, conda and other options.

Using venv:

- We first need to create a virtual environment using the command:

	python -m venv <path where the virtual environment directory should be created>
	
E.g.,

	python -m venv .myproj-venv
	
- This will create the directory with a whole bunch of stuff - The actual Python executables with the same version as the Python that invoked this command, scripts for activating the environment, pip executable etc.

- We can then use this script to activate the environment. The script to use depends on the OS:

	Linux: source .venv/bin/activate
	
	Windows: .venv\scripts\activate.bat
	
- Once activated, we should see the name of the virtual environment on the left of the terminal like so: 

	(.venv) /my/working/directory
	
- We can then install anything needed using the command:

	python -m pip install <package-name>
	
- To upgrade pip in this venv, we can do:

	python -m pip install --upgrade pip
	
- Once we have the necessary packages installed, we can just create a requirements.txt file that lists out the packages included in this virtual environment.
  So anyone else who needs to recreate the same environment can then generate it from this requirements.txt file.
  
  To create requirements.txt file:
	
	pip freeze > requirements.txt
	
  To create a virtual environment from this requirements.txt, after activating the environment, execute the command:
  
	pip install -r requirements.txt
	
=====================================================================================================================================================================

 Creating Python packages
 ========================
 
1. In the project folder, create a folder specifically for the package-related files.
2. Inside this package/ directory, we can create the virtual environment.
3. We MUST add a LICENSE.txt and README.txt in the package/ directory.
4. Add the code for the modules we want in the package.
5. Create a setup.py - which sort of tells how to package, what other packages do our package need to function etc. E.g.,
	import setuptools

	setuptools.setup(
		name='searchlogs',
		version='0.1',
		description='Package providing modules for searching logs, based on the choice of backend database from Elasticsearch or MongoDB.',
		url='#',
		author='Sid',
		install_requires=['requests'],
		author_email='sidharthr44@gmail.com',
		packages=setuptools.find_packages(),
		zip_safe=False
	)
	
6. We'd need to install setuptools package for this work.
7. Once we have this, we can install the package by running:
	
	If you add the -e flag in this command, then as soon as we make any changes in the package code, it will be updated in the installed package as well.
	This flag is quite handy while debugging.
	
	
	.venv\scripts\python setup.py install
	
	OR 
	
	.venv\scripts\python setup.py sdist # to create a tar.gz file which can be easily moved around.
	
	